// Code generated by go-bindata. DO NOT EDIT.
// sources:
// faucet.html (11.431kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\x7b\x93\xdb\x36\x92\xff\x7b\xfc\x29\x3a\x3c\xcf\x4a\x3a\x8b\xa4\x46\x63\x7b\xe7\x24\x52\x29\xaf\x37\xce\xf9\xea\x36\x49\x25\x4e\xdd\x6d\x65\x53\x57\x20\xd1\x12\xe1\x01\x01\x06\x00\xa5\x51\xa6\xf4\xdd\xaf\x00\x90\x14\xf5\x98\x89\xbd\xe3\xab\x3a\xff\x31\x26\xf1\x68\x34\xba\x7f\xfd\xa4\x92\xaf\xfe\xfa\xfd\xdb\x0f\x7f\xff\xe1\x1b\x28\x4c\xc9\x17\xcf\x12\xfb\x1f\x70\x22\x56\x69\x80\x22\x58\x3c\xbb\x48\x0a\x24\x74\xf1\xec\xe2\x22\x29\xd1\x10\xc8\x0b\xa2\x34\x9a\x34\xa8\xcd\x32\xbc\x09\xf6\x13\x85\x31\x55\x88\xbf\xd5\x6c\x9d\x06\xff\x1d\xfe\xfc\x26\x7c\x2b\xcb\x8a\x18\x96\x71\x0c\x20\x97\xc2\xa0\x30\x69\xf0\xfe\x9b\x14\xe9\x0a\x7b\xfb\x04\x29\x31\x0d\xd6\x0c\x37\x95\x54\xa6\xb7\x74\xc3\xa8\x29\x52\x8a\x6b\x96\x63\xe8\x5e\xc6\xc0\x04\x33\x8c\xf0\x50\xe7\x84\x63\x7a\x15\x2c\x9e\x59\x3a\x86\x19\x8e\x8b\xfb\xfb\xe8\x3b\x34\x1b\xa9\x6e\x77\xbb\x19\xbc\xa9\x4d\x81\xc2\xb0\x9c\x18\xa4\xf0\x8e\xd4\x39\x9a\x24\xf6\x2b\xdd\x26\xce\xc4\x2d\x14\x0a\x97\x69\x60\x59\xd7\xb3\x38\xce\xa9\xf8\xa8\xa3\x9c\xcb\x9a\x2e\x39\x51\x18\xe5\xb2\x8c\xc9\x47\x72\x17\x73\x96\xe9\xd8\x6c\x98\x31\xa8\xc2\x4c\x4a\xa3\x8d\x22\x55\x7c\x1d\x5d\x47\x7f\x8e\x73\xad\xe3\x6e\x2c\x2a\x99\x88\x72\xad\x03\x50\xc8\xd3\x40\x9b\x2d\x47\x5d\x20\x9a\x00\xe2\xc5\x3f\x77\xee\x52\x0a\x13\x92\x0d\x6a\x59\x62\xfc\x32\xfa\x73\x34\x71\x47\xf6\x87\x1f\x3f\xd5\x1e\xab\x73\xc5\x2a\x03\x5a\xe5\x9f\x7c\xee\xc7\xdf\x6a\x54\xdb\xf8\x3a\xba\x8a\xae\x9a\x17\x77\xce\x47\x1d\x2c\x92\xd8\x13\x5c\x3c\x89\x76\x28\xa4\xd9\xc6\xd3\xe8\x65\x74\x15\x57\x24\xbf\x25\x2b\xa4\xed\x49\x76\x2a\x6a\x07\xbf\xd8\xb9\x0f\xe9\xf0\xe3\xb1\x0a\xbf\xc4\x61\xa5\x2c\x51\x98\xe8\xa3\x8e\xa7\xd1\xd5\x4d\x34\x69\x07\x4e\xe9\xbb\x03\xac\xd2\xec\x51\x17\xd1\x1a\x95\x45\x2e\x0f\x73\x14\x06\x15\xdc\xdb\xd1\x8b\x92\x89\xb0\x40\xb6\x2a\xcc\x0c\xae\x26\x93\xcb\xf9\xb9\xd1\x75\xe1\x87\x29\xd3\x15\x27\xdb\x19\x2c\x39\xde\xf9\x21\xc2\xd9\x4a\x84\xcc\x60\xa9\x67\xe0\x29\xbb\x89\x9d\x3b\xb3\x52\x72\xa5\x50\xeb\xe6\xb0\x4a\x6a\x66\x98\x14\x33\x8b\x28\x62\xd8\x1a\xcf\xad\xd5\x15\x11\x27\x1b\x48\xa6\x25\xaf\x0d\x1e\x31\x92\x71\x99\xdf\xfa\x31\x67\xcd\xfd\x4b\xe4\x92\x4b\x35\x83\x4d\xc1\x9a\x6d\xe0\x0e\x82\x4a\x61\x43\x1e\x2a\x42\x29\x13\xab\x19\xbc\xae\x9a\xfb\x40\x49\xd4\x8a\x89\x19\x4c\xf6\x5b\x92\xb8\x15\x63\x12\x7b\xc7\xf5\xec\x22\xc9\x24\xdd\x3a\x1d\x52\xb6\x86\x9c\x13\xad\xd3\xe0\x48\xc4\xce\x21\x1d\x2c\xb0\x7e\x88\x30\xd1\x4e\x1d\xcc\x29\xb9\x09\xc0\x1d\x94\x06\x9e\x89\x30\x93\xc6\xc8\x72\x06\x57\x96\xbd\x66\xcb\x11\x3d\x1e\xf2\x55\x78\x35\x6d\x27\x2f\x92\xe2\xaa\x25\x62\xf0\xce\x84\x4e\x3f\x9d\x66\x82\x45\xc2\xda\xbd\x4b\x02\x4b\x12\x66\xc4\x14\x01\x10\xc5\x48\x58\x30\x4a\x51\xa4\x81\x51\x35\x5a\x1c\xb1\x05\xf4\xdd\xdf\x03\xde\xaf\xb8\x6a\xf9\x8a\x29\x5b\x37\xd7\xea\x3d\x1e\xdd\xf0\xe1\x4b\xdc\x40\xf3\x20\x97\x4b\x8d\x26\xec\xdd\xa9\xb7\x98\x89\xaa\x36\xe1\x4a\xc9\xba\xea\xe6\x2f\x12\x37\x0a\x8c\xa6\x41\xad\x78\xd0\xb8\x7f\xf7\x68\xb6\x55\x23\x8a\xa0\xbb\xb8\x54\x65\x68\x35\xa1\x24\x0f\xa0\xe2\x24\xc7\x42\x72\x8a\x2a\x0d\x7e\x92\x39\x23\x1c\x84\xbf\x33\xfc\xfc\xe3\x7f\x42\xa3\x32\x26\x56\xb0\x95\xb5\x82\x6f\x4c\x81\x0a\xeb\x12\x08\xa5\x16\xae\x51\x14\x05\xf1\x9e\x13\x07\xde\x53\x5e\xc3\xcc\x88\x3d\xbf\x17\x49\x56\x1b\x23\xbb\x85\x99\x11\x90\x19\x11\x52\x5c\x92\x9a\x1b\xa0\x4a\x56\x54\x6e\x44\x68\xe4\x6a\x65\x43\x9d\xbf\x85\xdf\x14\x00\x25\x86\x34\x53\x69\xd0\xae\x6d\x95\x48\x74\x25\xab\xba\x6a\xd4\xe8\x07\xf1\xae\x22\x82\x22\xb5\x4a\xe7\x1a\x83\xc5\xb7\x6c\x8d\x50\xa2\xbf\xcc\xc5\x31\x26\x72\xa2\xd0\x84\x7d\xa2\x27\xc8\x48\x62\xcf\x8c\xbf\x12\x34\xff\x92\x9a\xb7\x94\xba\x2b\x94\x28\x6a\x38\x78\x0b\x95\x75\x2c\xc1\xe2\xfe\x5e\x11\xb1\x42\x78\xce\xe8\xdd\x18\x9e\x93\x52\xd6\xc2\xc0\x2c\x85\xe8\x8d\x7b\xd4\xbb\xdd\x01\x75\x80\x84\xb3\x45\x42\x1e\xc3\x37\x48\x91\x73\x96\xdf\xa6\x81\x61\xa8\xd2\xfb\x7b\x4b\x7c\xb7\x9b\xc3\xfd\x3d\x5b\xc2\xf3\xe8\x47\xcc\x49\x65\xf2\x82\xec\x76\x2b\xd5\x3e\x47\x78\x87\x79\x6d\x70\x38\xba\xbf\x47\xae\x71\xb7\xd3\x75\x56\x32\x33\x6c\xb7\xdb\x71\x41\x77\x3b\xcb\x73\xc3\xe7\x6e\x07\xb1\x25\x2a\x28\xde\xc1\xf3\xe8\x07\x54\x4c\x52\x0d\x7e\x7d\x12\x93\x45\x12\x73\xb6\x68\xf6\x1d\x0a\x29\xae\xf9\x1e\x2f\xb1\x05\x4c\x07\x74\x67\x37\x8e\xd5\x3e\xa7\x67\xcc\x60\x15\x76\xdc\x37\x78\xd0\xcc\xe0\x2d\x6e\xd3\xe0\xfe\xbe\xbf\xb7\x99\xcd\x09\xe7\x19\xb1\x72\xf1\x57\xeb\x36\xfd\x8e\x16\xa7\x6b\xa6\x5d\x4e\xb5\x68\x39\xd8\xb3\xfd\x89\x76\x7d\xe4\xb9\x8c\xac\x66\x70\x3d\xed\xb9\xad\x73\x26\xff\xfa\xc8\xe4\xaf\xcf\x2e\xae\x88\x40\x0e\xee\x6f\xa8\x4b\xc2\xdb\xe7\xc6\x5a\x7a\x6e\xe0\x78\x53\x68\x9d\x74\xc7\x5a\xe7\xec\x27\x73\x90\x6b\x54\x4b\x2e\x37\x33\x20\xb5\x91\x73\x28\xc9\x5d\x17\xf0\xae\x27\x93\x3e\xdf\x36\x17\x24\x19\x47\xe7\x5e\x14\xfe\x56\xa3\x36\xba\x73\x26\x7e\xca\xfd\xb5\x3e\x85\xa2\xd0\x48\x8f\xa4\x61\x4f\xb4\xa2\x75\xab\x7a\xaa\xef\x84\x79\x96\xf7\xa5\x94\x5d\x0c\xe9\xb3\xd1\x90\xee\x85\xbb\x60\x91\x18\xb5\x5f\x77\x91\x18\xfa\x59\x31\x40\xd9\x1c\xef\xa1\x10\xe0\x3d\x9a\xbd\x7b\x85\xa8\x7c\x82\x61\x21\x0b\xee\x35\x89\x0d\x7d\xc2\xc9\x16\x84\x19\xd1\xf8\x29\xc7\xbb\x50\xbf\x3f\xde\xbd\x3e\xf5\xfc\x02\x89\x32\x19\x12\xf3\x29\x0c\x2c\x6b\x41\x7b\xf7\x77\xbe\xf3\xa9\x0c\xd4\x82\xad\x51\x69\x66\xb6\x9f\xca\x01\xd2\x3d\x0b\xfe\xfd\x90\x85\x24\x36\xea\x71\xac\xf5\x5f\xbe\x90\x71\xff\x51\x4e\x72\xbd\xf8\x77\xb9\x01\x2a\x51\x83\x29\x98\x06\x1b\x5d\xbf\x4e\xe2\xe2\xba\x5b\x52\x2d\x3e\xd8\x09\x27\x54\x58\xba\xdc\x02\x98\x06\x55\x0b\x17\x7a\xa5\x00\x53\xe0\x61\x3e\xd2\x44\xe9\x08\x3e\x48\x9b\xd3\xad\x51\x18\x28\x09\x67\x39\x93\xb5\x06\x92\x1b\xa9\x34\x2c\x95\x2c\x01\xef\x0a\x52\x6b\x63\x09\x59\xf7\x41\xd6\x84\x71\x67\x4b\x4e\xa5\x20\x15\x90\x3c\xaf\xcb\xda\xe6\xa4\x62\x05\x28\x64\xbd\x2a\x1a\x5e\x8c\x04\x1f\x98\xb8\x14\xab\x8e\x1f\x5d\x91\x12\x88\x31\x24\xbf\xd5\x63\x68\xbd\x02\x10\x85\x60\x18\x52\xbb\x2b\x97\x65\x29\x05\x5c\x2b\x0a\x15\x51\x66\x0b\xfa\x30\xb9\x20\x79\xee\xa2\x5c\x04\x6f\xc4\x56\x0a\x84\x82\xac\x1d\x87\xf0\xc1\xd7\x13\x96\xaf\x77\x24\xc7\x4c\xca\x6e\x35\x94\x64\xdb\x1e\xd7\x70\xbf\x61\xa6\x60\x5e\x3c\x15\xaa\xd2\x6e\xa5\xc0\x59\xc9\x8c\x8e\x92\xb8\xda\x7b\xd4\x7d\x6c\xe6\x61\x21\x15\xfb\xdd\x66\x36\xbc\xef\x3e\xcd\x91\x73\x69\x7d\xa3\xd3\x3a\xc7\xa5\x99\xc1\x4b\xef\x1b\x8f\x71\xdc\x94\x40\xe7\x40\xdc\xd2\x74\xa5\xa5\x0d\x38\x33\xb8\xf6\xf9\xac\x4f\x24\xa8\xe9\x71\x40\x8f\xa0\xe6\x0f\xbd\xb9\xa9\xee\x3a\x3e\xba\xa4\x78\xd2\x11\xb1\x08\x38\x14\xca\x9a\x75\x62\x1c\x43\x49\x6e\x11\x08\x24\xe4\xa8\x44\x6e\x98\x76\x05\x16\x73\x0d\x82\xd8\x6c\x10\xcd\xd7\xd6\x74\xd3\x1f\x3d\x41\x26\x56\x97\xd3\x89\x47\xa4\x7d\xb0\xe4\x2f\xa7\x13\x26\x8c\xbc\x9c\x4e\x26\x77\x93\x4f\xfc\x77\x39\x9d\x48\x71\x39\x9d\x98\x02\x2f\xa7\x93\xcb\xe9\x75\x1f\xcb\x7e\xa4\x4d\x2d\xed\x2a\xd4\xf6\xb4\x06\x2b\x97\xd3\xc9\x9a\x91\xcb\xe9\xc4\x71\x7e\x79\xfd\xe6\x72\xfa\xee\x72\xfa\xce\x33\x15\xad\x24\x2a\xce\xa2\xb2\xa6\xcc\x44\x19\x97\xab\xcb\xe9\xbb\x00\x0c\x51\x2b\x34\x69\xf0\x3f\x24\x93\xb5\x99\x65\x9c\x88\xdb\x60\xe1\xee\x67\xd3\x13\x07\x9b\xf3\x19\x2d\x54\x44\x5b\x0c\xd9\x2b\x3a\x58\x35\xdd\x13\x0d\x43\x5d\x2b\x25\x6b\x61\xc3\x28\x58\x21\x39\x93\x16\x03\x0b\x4b\x2b\xc9\x51\x94\x64\x2a\x5e\xbc\x95\xd5\x36\x74\x44\xdc\xf6\x13\xb9\xeb\xba\xaa\xa4\x32\x51\x5f\xfe\xc4\x56\x4e\x1c\x75\x7c\x33\x79\x75\xf3\xfa\x51\xf6\xb5\xcd\xcb\xdd\x1d\x3a\x0e\x49\x26\xd7\x08\xbe\x0a\xc8\xe4\x1d\x10\x41\x61\xc9\x14\x02\xd9\x90\xed\x57\x49\x4c\x5d\xcd\xf6\x74\x98\x2f\x1b\x73\xfc\x7f\x85\xf3\xd6\x47\x8c\xa1\xaa\x33\xce\x74\x01\x04\x04\x6e\x20\xd1\x46\x49\xb1\x5a\xb8\xd1\xdc\x16\xb1\xee\x15\x2a\xa9\xcd\x63\xea\xc7\x32\x43\x4a\xcf\x00\xe0\x4b\xe9\x7f\xb3\xd9\x44\xad\x24\x9d\xf2\x0b\xe4\x55\x6c\xfd\x65\x2d\x98\xd9\xc6\xde\xee\xa4\x88\xbf\x66\x34\x9d\xde\x4c\x5f\xbf\x9e\xbe\xfc\xb7\x9b\x57\xaf\xa6\x37\x2f\x5f\x3d\x84\x0c\x7b\xa9\x27\x02\xc3\xe7\xdd\xdf\x49\x5b\xe7\x76\x49\xb7\xc7\x4b\x9b\xec\xd9\x90\x4e\x6d\xd1\xa2\x82\x7f\x1a\x43\xb5\xb0\x99\x4b\x48\xf8\xd9\xa4\xe3\x33\x50\xe4\x60\xf4\x08\x67\x4f\x84\x56\x0b\x1f\x8b\x14\x59\x1b\x7b\xc3\xb6\xfc\x67\x52\x74\x70\x1a\x83\x66\x65\xc5\xb7\x90\xef\xb5\x7e\x1e\x57\x0f\x2a\xe5\x0f\x61\x75\xa8\x36\x0f\x32\x97\x2e\x94\x92\xa2\x4d\x13\x74\xad\x73\xac\x5c\x5f\xd8\x86\xde\xbf\x6c\x7f\x27\xc2\x30\x81\x6d\x88\x8e\xe0\x7b\xc1\xb7\x50\x6b\x84\xa5\x54\x40\x31\xab\x57\x2b\x97\x57\x28\xa8\x14\x5b\x13\x83\x6d\x5c\xd6\x0d\x2a\x3a\x50\xf4\x4a\x21\x9b\x23\xf1\x5e\xca\xf2\x77\x59\x43\x4e\x04\x18\x45\xf2\x5b\x6f\x29\xb5\x52\xd6\x52\x2a\xf4\xb7\xe9\x32\x83\x0c\xb9\xdc\xb8\x25\xfe\xde\x4b\x86\xdc\xa5\x09\x1a\x11\x0a\xb9\x81\xb2\xce\x9d\x41\xda\x34\xc0\x5d\x62\x43\x98\x81\x5a\x18\xc6\xbd\x3c\x4d\xad\x84\x4d\x2a\xf0\x30\xac\x37\x89\xd3\x3e\x65\x2a\xa4\xf3\xde\xd9\xf6\xd4\xf0\xf6\x21\x22\x7e\xc8\x8e\xfe\x66\x97\xc0\xb7\x75\x65\x88\xaf\x62\xbb\x93\x4e\xca\xd2\x04\xcb\xc5\x87\x02\xcf\x64\x6b\x5d\x41\x09\x0a\xdf\xfa\xe5\x50\x29\x69\x30\xb7\xd0\x01\xb2\x22\x4c\x68\xab\x7b\x97\xa2\x60\xf9\x09\x05\x67\xf7\xd4\x3c\xec\xbb\xa7\x6e\x3a\x8e\xe1\x5b\x2e\x33\xc2\x61\x6d\x6d\x2a\xe3\x36\xd3\x94\x50\x48\x2b\xe4\x9e\x5e\xb4\x21\xa6\xd6\x20\x97\x6e\xd4\x73\x6e\xf7\xaf\x89\xb2\x58\xc1\xb2\x32\x90\x36\xbd\x3f\x3b\xa6\x51\xad\x9b\x8e\xa6\x7d\x35\x0c\xd5\xc1\x7c\xa7\xdf\x14\x7e\xf9\x75\xfe\xac\x61\xe5\xaf\xb8\x74\xe0\xb3\x96\xe4\xaf\x6c\x0a\x62\x20\x57\x48\x0c\x6a\xc8\xb9\xd4\xb5\xf2\x1c\x52\x25\x2b\xb0\x5c\xb6\x94\x5a\xca\x76\xa2\x72\xa7\xb5\x44\x86\x05\xd1\xc5\xa8\x69\x5d\x2a\x74\x78\xe8\xe6\xda\xf1\x0b\x8b\xef\xa1\x25\xc0\xd2\xc9\x1c\x58\xd2\xd2\x8d\x38\x8a\x95\x29\xe6\xc0\x5e\xbc\xe8\x16\x5f\xb0\x25\x0c\xdb\x15\xbf\xb0\x5f\x23\x73\x17\xd9\x53\x20\x4d\xa1\x7f\x9a\x3b\xb0\xa1\xa3\x2b\xce\x72\x1c\xb2\x31\x5c\x8d\xe6\xed\x6c\xa6\x90\xdc\xb6\x6f\x8d\x1e\xfd\x7f\xee\xef\x6e\x7e\x28\x19\x27\xfc\x03\xd9\xf8\xb6\x84\x06\x02\x2b\xa6\x0d\xd4\x8a\x43\xe3\x2d\xbc\x0a\x3a\x85\xb8\x75\x7d\xa9\x9c\xe0\xb2\x79\x68\x30\xd5\x5e\xc1\x93\x89\x34\x0a\x3a\xfc\x8f\x9f\xbe\xff\x2e\xd2\x46\x31\xb1\x62\xcb\xed\xf0\xbe\x56\x7c\x06\xcf\x87\xc1\xbf\xd4\x8a\x07\xa3\x5f\x26\xbf\x46\x6b\xc2\x6b\x1c\x3b\x7d\xcf\xdc\xdf\x93\x53\xc6\xd0\x3c\xce\xe0\xf0\xc0\xdd\x68\x34\x3f\xdf\xc2\xe9\x75\x9c\x14\x6a\x34\x43\xbb\xb0\x03\xfe\xb1\x8c\x08\x94\x68\x0a\xe9\x9c\x84\xc2\x5c\x0a\x81\xb9\x81\xba\x92\xa2\x11\x09\x70\xa9\xf5\x1e\x88\xed\x8a\xf4\x14\x14\xcd\xfa\xd4\xa5\x05\xff\x85\xd9\x4f\x32\xbf\x45\x33\x1c\x0e\x37\x4c\x50\xb9\x89\xb8\xf4\x4e\x3d\xb2\x46\x2a\x73\xc9\x21\x4d\x53\x68\xdc\x46\x30\x82\xaf\x21\xd8\x68\xeb\x40\x02\x98\xd9\x47\xfb\x34\x82\x17\x70\xbc\xdd\xba\x1e\x78\x01\x41\x4c\x2a\x16\x8c\xbc\x39\xb4\x82\x97\xa2\x44\xad\xc9\x0a\xfb\x0c\xba\xa2\xad\x03\x99\xbd\x47\xa9\x57\x90\x82\x53\x50\x45\x94\x46\xbf\x24\xa2\xc4\x90\x16\x6d\x16\xb3\x6e\x59\x9a\x82\xa8\x39\xdf\x83\xd4\x1b\xc5\xbc\x85\xdf\xc1\xf2\xc8\x47\xb5\xaf\xd2\x14\x6c\xd5\x6c\x45\x4c\xf7\x3b\xad\xf2\x7d\x7d\x3f\x8a\x6c\x04\xda\xef\x18\xcd\xfb\x68\x3e\xa0\x86\xf4\x8f\xc8\x21\x3d\xa6\x87\xf4\x01\x82\xae\x9d\xf2\x18\x3d\xdf\x7e\xe9\x91\x73\x03\x0f\x50\x13\x75\x99\xa1\x7a\x8c\x9c\x6f\xa7\x34\xe4\x9c\xa8\xdf\x0b\xd3\xdb\x3b\x86\xab\xd7\xa3\x07\xa8\xa3\x52\xf2\x41\xe2\x42\x9a\xed\xf0\x9e\x93\xad\x8d\x2a\x30\x30\xb2\x7a\xeb\xba\x1f\x83\xb1\x8b\xed\x33\xe8\x28\x8c\x5d\x5f\x7b\x06\x03\xf7\x66\xe7\x59\x89\x6e\xd7\xab\xc9\x64\x32\x86\xf6\x8b\xd0\x5f\x88\x35\x42\x55\xe3\xee\x01\x7e\x74\x9d\xe7\x36\xc3\x78\x0a\x47\x0d\x8d\x8e\xa7\xe6\xfd\x09\x5c\x75\xb1\xe1\x80\x2d\xf8\xd3\x9f\xe0\x64\xf6\x10\xc6\x71\x0c\x7f\x23\xea\xd6\xf5\x2a\x2a\x85\x6b\xd7\xcf\xe8\xd6\x97\x4c\x6b\xd7\x27\xd0\x40\xa5\xc0\x66\xcf\xe7\xb9\xfd\x13\x1e\x9b\x65\xb0\x80\xc9\x31\x83\xd6\x1d\xf6\xc2\xc2\x99\x68\xd1\xa3\x7b\x18\x08\x2e\x76\xfd\xf3\x0e\x76\xb2\x12\xe1\xab\x14\x82\xa0\xbf\xf9\x64\x85\x5d\xd0\x11\xbb\xd0\x68\x3e\x78\x5d\x0c\x9b\xe8\x78\x2e\x76\x8d\xc6\x70\x3d\x99\x4c\x46\x27\x4c\xec\xf6\xe2\x7d\x53\xd9\x04\x0d\x88\xd8\x3a\x97\xd8\xc9\xd6\xa5\xa8\x36\xd9\xb2\x2e\x8d\x43\x2e\x39\xf7\x39\x4b\xb3\xd5\x0a\xb8\xe9\xeb\xa4\x10\x5e\xcd\xcf\x44\xd1\x9e\x24\x7b\x57\x3b\x56\xcf\x19\xd9\x1f\xab\xe8\x50\x66\x47\x8b\xc3\xab\x03\xa5\x1c\xe8\xeb\xbc\x62\x2e\x3a\xbe\xd9\x5e\xa2\x47\xea\xda\xeb\xeb\x58\x66\x3d\xfe\x3d\x9d\x17\x57\x9f\x78\x8d\x6e\xba\xaa\x75\x31\x3c\x62\x74\x34\x3f\xd5\xcd\x7b\x83\xca\xe6\xe3\xd2\x86\x2c\xab\x0b\x5b\x74\x28\x3c\x51\x89\x2b\x0a\x14\x86\x0a\x05\x45\xd5\xa6\x14\xbe\x86\xb0\x09\xe0\x81\xca\x7c\xfd\xda\x87\x53\xef\x46\x27\xb2\x9d\x03\x83\x85\x4d\xf3\x80\x85\x61\xef\x2e\x2e\x2f\x93\x02\x01\x00\x8e\x2c\xc1\xa1\xf5\x00\xae\x76\x31\x72\x52\x69\xa4\x90\x82\xff\x4a\x3f\x1c\x45\xb5\x60\x77\xc3\x51\xd8\xbc\x1f\xd3\x68\xe7\xe7\x5d\x55\xda\xf2\xfe\x22\x85\x20\x31\x0a\x18\x4d\x07\x01\xbc\x38\x67\x87\x36\xf4\x0e\x16\x7b\x0e\xfa\x5b\x01\x12\x43\x17\xae\x4f\xeb\xcb\xc3\x7f\x04\x19\xc9\x6f\x57\xae\xee\x9a\xd9\x7c\x6b\x78\x42\x96\xac\x89\x21\xca\x51\x1d\xcd\x61\xbf\xbc\xa9\x4b\x73\xab\xa1\x39\xf8\x02\xd8\xb5\x83\xa1\xfb\x84\xe2\xde\x32\xa9\x28\xaa\x50\x11\xca\x6a\x3d\x83\x97\xd5\xdd\xfc\x1f\xed\x27\x26\xd7\xb4\x7e\x94\xd5\x4a\xe1\xe2\x84\xa3\xa6\x0b\xfa\x02\x82\x24\xb6\x0b\xfe\x88\x4c\x77\xd9\xfe\xaf\x03\xe0\x4c\x6b\x1e\xba\x6f\xf7\xcd\x78\xc9\x28\xe5\x68\x19\xde\x93\xb7\x16\x69\xf5\xdf\xb7\xab\xc3\x23\xa1\xe9\xc9\xef\xf7\xec\x00\xb9\xc6\x47\x36\x74\xed\xfd\x81\x05\x40\x68\xaf\xcc\x9c\xcc\x9b\xda\xde\x0d\xab\x81\x93\x45\xf3\x5b\x0f\x5a\x2b\x97\x70\x0d\xc3\x06\x60\x63\x18\x68\x9b\x00\x52\x3d\x18\x45\x45\x5d\x12\xc1\x7e\xc7\xa1\x0d\x4e\x23\x2f\x2b\xf7\xbd\x20\x38\xf5\xcb\x27\xcc\xec\x1b\xf9\x83\x36\xd0\x0d\x1a\x21\x0e\x5a\xed\xbe\xdc\xb7\x12\x66\x30\x99\x0f\x3e\x53\x42\xe7\x4f\x09\x33\xa2\xa0\xff\x12\xb6\x11\x18\x94\xb4\xa7\xb7\x73\x19\x51\x03\xdf\x38\x71\x49\xba\x90\x9b\x74\x70\x3d\xe9\x98\xf4\x8a\x76\x7a\x1e\x34\x58\x3b\x51\x86\xe5\xb2\x35\xcd\x05\x5c\x4f\xbe\x04\xb7\xbe\xf9\x72\x74\x03\xa3\x58\x85\x14\x48\x6e\xd8\x1a\xff\x0f\x2e\xf2\x05\x84\xfc\xd9\x2c\x5a\x1c\xb6\xc2\x73\x30\x3d\xe0\xd7\xce\x76\xb2\xfd\x57\x6b\x6f\x10\x3b\x09\xbf\x80\xe0\xec\x45\x1e\x44\xe2\xd1\xc2\x23\xd3\x7e\xd8\xee\xdd\x07\xb0\xe0\x38\xb0\xd8\x94\xb7\xfb\x78\x3b\x8a\x0a\x53\xf2\x61\x90\x18\xf7\x2b\x1e\xcb\x73\x47\xc1\x11\xf0\xc3\x87\x79\xdd\xee\xb0\x9a\xb1\x45\x3c\x1e\x15\x5b\xd0\xcb\x50\xba\x82\xac\x4d\x47\x60\xb7\xff\xb1\x53\x1c\xc3\x4f\x86\x28\x03\x04\x7e\x7e\x0f\x75\x45\x89\xf1\x9f\x9a\x6c\x90\xf4\x9f\x72\xda\x5f\x43\x65\x44\x69\x58\x4a\xb5\x21\x8a\x36\xed\x20\x53\xe0\xd6\x7d\x6a\x6a\xf3\x3f\x8d\xe6\xbd\xf5\x62\x6b\xc2\x87\x27\xc5\xdf\xf3\xe1\x20\xea\xab\x7c\x30\x8a\x90\xe4\xc5\xe9\x42\x17\xb1\xba\x73\x53\xf8\xce\xd5\x01\xc3\xe7\x43\x53\x30\x3d\x8a\x88\x31\x6a\x38\x38\x00\xc3\x60\x64\xf5\x7a\xd5\xab\xcb\xba\xed\xc9\x81\x59\x3d\x46\x63\x9f\x51\x77\xd9\x40\xbb\x3c\xd7\x7a\xe8\x71\x35\x18\xf7\x68\x1f\xc2\x6a\x70\x39\xe8\x14\xb5\x37\xef\xfd\x3d\xd2\xb3\x9c\x1c\x90\x1e\x58\x2b\x1b\x9c\x1c\x4f\x28\x7d\x6b\xed\x67\x18\x9c\xb1\xf4\x63\x74\x8c\x3a\x61\x7b\x7f\xfd\xa8\x94\xfd\xcf\x46\x1e\x10\x31\xa3\x83\x51\xa4\xeb\xcc\x37\x28\x86\xaf\xba\x2a\xac\x5d\xe6\xc0\x7b\x1c\x0a\x4e\x12\x0a\x7b\xc4\x61\x52\x11\x1e\x25\x21\x8f\x44\x8d\xe6\x48\x7f\xab\xdd\xd8\x0a\x7c\x32\xea\xfa\x5b\xdf\x68\x9b\x61\xf9\x2f\x0d\x1b\xcc\xb4\x6b\x27\x40\x83\x77\xd7\xd2\xf1\xad\x9b\x37\x3f\xbc\xef\xb5\x6f\x3a\x8b\x18\x3a\xea\xdd\x0f\x15\xcf\x35\x4b\xce\xfe\x32\x72\xb3\xd9\x44\x2b\x29\x57\xdc\xff\x26\xb2\xeb\xa6\xc4\xa4\x62\xd1\x47\x1d\x00\xd1\x5b\x91\x03\xc5\x25\xaa\x45\x8f\x7c\xd3\x62\x49\x62\xff\x9b\xbd\x24\xf6\x3f\x4b\xfe\xdf\x00\x00\x00\xff\xff\x8e\xa7\xcf\x22\xa7\x2c\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x48, 0x5b, 0x8f, 0xab, 0x54, 0xab, 0xe, 0x69, 0x8c, 0x5d, 0xf8, 0xce, 0x91, 0xfd, 0xd5, 0xd1, 0x68, 0xf5, 0x93, 0xb1, 0xf4, 0xb7, 0x80, 0x66, 0x53, 0x48, 0x30, 0xda, 0x93, 0xd, 0xf3, 0xeb}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": {faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
