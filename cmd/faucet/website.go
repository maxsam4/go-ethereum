// Code generated by go-bindata. DO NOT EDIT.
// sources:
// faucet.html (11.407kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\x6d\x93\xdb\x36\x92\xfe\x3c\xfe\x15\x1d\x9e\x67\x25\x9d\x45\x52\xa3\xb1\xbd\x73\x12\xa9\x94\xd7\x1b\xe7\x7c\x75\x9b\xa4\x12\xa7\xee\xb6\xb2\xa9\x2b\x90\x68\x89\xf0\x80\x00\x03\x80\xd2\x28\x53\xfa\xef\x57\x00\x48\x8a\x7a\x99\x89\xbd\xe3\xab\x3a\x7f\x18\x93\x40\xa3\xd1\xe8\x7e\xfa\x05\x4d\x25\x5f\xfd\xf5\xfb\xb7\x1f\xfe\xfe\xc3\x37\x50\x98\x92\x2f\x9e\x25\xf6\x3f\xe0\x44\xac\xd2\x00\x45\xb0\x78\x76\x91\x14\x48\xe8\xe2\xd9\xc5\x45\x52\xa2\x21\x90\x17\x44\x69\x34\x69\x50\x9b\x65\x78\x13\xec\x27\x0a\x63\xaa\x10\x7f\xab\xd9\x3a\x0d\xfe\x3b\xfc\xf9\x4d\xf8\x56\x96\x15\x31\x2c\xe3\x18\x40\x2e\x85\x41\x61\xd2\xe0\xfd\x37\x29\xd2\x15\xf6\xd6\x09\x52\x62\x1a\xac\x19\x6e\x2a\xa9\x4c\x8f\x74\xc3\xa8\x29\x52\x8a\x6b\x96\x63\xe8\x5e\xc6\xc0\x04\x33\x8c\xf0\x50\xe7\x84\x63\x7a\x15\x2c\x9e\x59\x3e\x86\x19\x8e\x8b\xfb\xfb\xe8\x3b\x34\x1b\xa9\x6e\x77\xbb\x19\xbc\xa9\x4d\x81\xc2\xb0\x9c\x18\xa4\xf0\x8e\xd4\x39\x9a\x24\xf6\x94\x6e\x11\x67\xe2\x16\x0a\x85\xcb\x34\xb0\xa2\xeb\x59\x1c\xe7\x54\x7c\xd4\x51\xce\x65\x4d\x97\x9c\x28\x8c\x72\x59\xc6\xe4\x23\xb9\x8b\x39\xcb\x74\x6c\x36\xcc\x18\x54\x61\x26\xa5\xd1\x46\x91\x2a\xbe\x8e\xae\xa3\x3f\xc7\xb9\xd6\x71\x37\x16\x95\x4c\x44\xb9\xd6\x01\x28\xe4\x69\xa0\xcd\x96\xa3\x2e\x10\x4d\x00\xf1\xe2\x9f\xdb\x77\x29\x85\x09\xc9\x06\xb5\x2c\x31\x7e\x19\xfd\x39\x9a\xb8\x2d\xfb\xc3\x8f\xef\x6a\xb7\xd5\xb9\x62\x95\x01\xad\xf2\x4f\xde\xf7\xe3\x6f\x35\xaa\x6d\x7c\x1d\x5d\x45\x57\xcd\x8b\xdb\xe7\xa3\x0e\x16\x49\xec\x19\x2e\x9e\xc4\x3b\x14\xd2\x6c\xe3\x69\xf4\x32\xba\x8a\x2b\x92\xdf\x92\x15\xd2\x76\x27\x3b\x15\xb5\x83\x5f\x6c\xdf\x87\x6c\xf8\xf1\xd8\x84\x5f\x62\xb3\x52\x96\x28\x4c\xf4\x51\xc7\xd3\xe8\xea\x26\x9a\xb4\x03\xa7\xfc\xdd\x06\xd6\x68\x76\xab\x8b\x68\x8d\xca\x22\x97\x87\x39\x0a\x83\x0a\xee\xed\xe8\x45\xc9\x44\x58\x20\x5b\x15\x66\x06\x57\x93\xc9\xe5\xfc\xdc\xe8\xba\xf0\xc3\x94\xe9\x8a\x93\xed\x0c\x96\x1c\xef\xfc\x10\xe1\x6c\x25\x42\x66\xb0\xd4\x33\xf0\x9c\xdd\xc4\xce\xed\x59\x29\xb9\x52\xa8\x75\xb3\x59\x25\x35\x33\x4c\x8a\x99\x45\x14\x31\x6c\x8d\xe7\x68\x75\x45\xc4\xc9\x02\x92\x69\xc9\x6b\x83\x47\x82\x64\x5c\xe6\xb7\x7e\xcc\x79\x73\xff\x10\xb9\xe4\x52\xcd\x60\x53\xb0\x66\x19\xb8\x8d\xa0\x52\xd8\xb0\x87\x8a\x50\xca\xc4\x6a\x06\xaf\xab\xe6\x3c\x50\x12\xb5\x62\x62\x06\x93\xfd\x92\x24\x6e\xd5\x98\xc4\x3e\x70\x3d\xbb\x48\x32\x49\xb7\xce\x86\x94\xad\x21\xe7\x44\xeb\x34\x38\x52\xb1\x0b\x48\x07\x04\x36\x0e\x11\x26\xda\xa9\x83\x39\x25\x37\x01\xb8\x8d\xd2\xc0\x0b\x11\x66\xd2\x18\x59\xce\xe0\xca\x8a\xd7\x2c\x39\xe2\xc7\x43\xbe\x0a\xaf\xa6\xed\xe4\x45\x52\x5c\xb5\x4c\x0c\xde\x99\xd0\xd9\xa7\xb3\x4c\xb0\x48\x58\xbb\x76\x49\x60\x49\xc2\x8c\x98\x22\x00\xa2\x18\x09\x0b\x46\x29\x8a\x34\x30\xaa\x46\x8b\x23\xb6\x80\x7e\xf8\x7b\x20\xfa\x15\x57\xad\x5c\x31\x65\xeb\xe6\x58\xbd\xc7\xa3\x13\x3e\x7c\x88\x1b\x68\x1e\xe4\x72\xa9\xd1\x84\xbd\x33\xf5\x88\x99\xa8\x6a\x13\xae\x94\xac\xab\x6e\xfe\x22\x71\xa3\xc0\x68\x1a\xd4\x8a\x07\x4d\xf8\x77\x8f\x66\x5b\x35\xaa\x08\xba\x83\x4b\x55\x86\xd6\x12\x4a\xf2\x00\x2a\x4e\x72\x2c\x24\xa7\xa8\xd2\xe0\x27\x99\x33\xc2\x41\xf8\x33\xc3\xcf\x3f\xfe\x27\x34\x26\x63\x62\x05\x5b\x59\x2b\xf8\xc6\x14\xa8\xb0\x2e\x81\x50\x6a\xe1\x1a\x45\x51\x4f\x10\x87\xdd\x53\x51\xc3\xcc\x88\x3d\xd5\x45\x92\xd5\xc6\xc8\x8e\x30\x33\x02\x32\x23\x42\x8a\x4b\x52\x73\x03\x54\xc9\x8a\xca\x8d\x08\x8d\x5c\xad\x6c\xa6\xf3\x87\xf0\x8b\x02\xa0\xc4\x90\x66\x2a\x0d\x5a\xda\xd6\x86\x44\x57\xb2\xaa\xab\xc6\x8a\x7e\x10\xef\x2a\x22\x28\x52\x6b\x73\xae\x31\x58\x7c\xcb\xd6\x08\x25\xfa\xb3\x5c\x1c\x43\x22\x27\x0a\x4d\xd8\x67\x7a\x02\x8c\x24\xf6\xc2\x74\x16\xaa\x79\xcb\xa3\x13\xbe\x44\x51\xc3\xc1\x5b\xa8\x6c\x44\x09\x16\xf7\xf7\x8a\x88\x15\xc2\x73\x46\xef\xc6\xf0\x9c\x94\xb2\x16\x06\x66\x29\x44\x6f\xdc\xa3\xde\xed\x1a\xbe\x00\x09\x67\x8b\x84\x3c\x06\x69\x90\x22\xe7\x2c\xbf\x4d\x03\xc3\x50\xa5\xf7\xf7\x96\xed\x6e\x37\x87\xfb\x7b\xb6\x84\xe7\xd1\x8f\x98\x93\xca\xe4\x05\xd9\xed\x56\xaa\x7d\x8e\xf0\x0e\xf3\xda\xe0\x70\x74\x7f\x8f\x5c\xe3\x6e\xa7\xeb\xac\x64\x66\xd8\x2e\xb7\xe3\x82\xee\x76\x56\xda\x46\xc2\xdd\x0e\x62\xcb\x54\x50\xbc\x83\xe7\xd1\x0f\xa8\x98\xa4\x1a\x3c\x7d\x12\x93\x45\x12\x73\xb6\x68\xd6\xb5\x8a\x89\x6b\xbe\x47\x47\x6c\xe1\xd1\xe9\xcc\x39\x89\x13\xb2\x2f\xe3\x19\xcc\xaf\xc2\x4e\xee\xc6\xfa\x9a\x19\xbc\xc5\x6d\x1a\xdc\xdf\xf7\xd7\x36\xb3\x39\xe1\x3c\x23\x56\x23\xfe\x50\xdd\xa2\xdf\xd1\xa2\x72\xcd\xb4\x2b\xa0\x16\xad\x04\x3d\x81\x3f\xcd\x89\x8f\xc2\x94\x91\xd5\x0c\xae\xa7\xbd\x18\x75\xce\xbf\x5f\x1f\xf9\xf7\xf5\x59\xe2\x8a\x08\xe4\xe0\xfe\x86\xba\x24\xbc\x7d\x6e\x7c\xa3\xe7\x6a\xc7\x8b\x42\x1b\x91\x3b\xd1\xba\xc8\x3e\x99\x83\x5c\xa3\x5a\x72\xb9\x99\x01\xa9\x8d\x9c\x43\x49\xee\xba\xec\x76\x3d\x99\xf4\xe5\xb6\x85\x1f\xc9\x38\xba\x58\xa2\xf0\xb7\x1a\xb5\xd1\x5d\xe4\xf0\x53\xee\xaf\x0d\x20\x14\x85\x46\x7a\xa4\x0d\xbb\xa3\x55\xad\xa3\xea\x99\xbe\x53\xe6\x59\xd9\x97\x52\x76\x09\xa3\x2f\x46\xc3\xba\x97\xdb\x82\x45\x62\xd4\x9e\xee\x22\x31\xf4\xb3\x02\xbe\xb2\x05\xdd\x43\xf1\xde\xc7\x2f\x7b\xf6\x0a\x51\xf9\x6a\xc2\x42\x16\xdc\x6b\x12\x1b\xfa\x84\x9d\x2d\x08\x33\xa2\xf1\x53\xb6\x77\x79\x7d\xbf\xbd\x7b\x7d\xea\xfe\x05\x12\x65\x32\x24\xe6\x53\x04\x58\xd6\x82\xf6\xce\xef\x22\xe5\x53\x05\xa8\x05\x5b\xa3\xd2\xcc\x6c\x3f\x55\x02\xa4\x7b\x11\xfc\xfb\xa1\x08\x49\x6c\xd4\xe3\x58\xeb\xbf\x7c\x21\xe7\xfe\xa3\x02\xe4\x7a\xf1\xef\x72\x03\x54\xa2\x06\x53\x30\x0d\x36\x95\x7e\x9d\xc4\xc5\x75\x47\x52\x2d\x3e\xd8\x09\xa7\x54\x58\xba\x42\x02\x98\x06\x55\x0b\x97\x67\xa5\x00\x53\xe0\x61\xf1\xd1\xa4\xe4\x08\x3e\x48\x5b\xc0\xad\x51\x18\x28\x09\x67\x39\x93\xb5\x06\x92\x1b\xa9\x34\x2c\x95\x2c\x01\xef\x0a\x52\x6b\x63\x19\xd9\xf0\x41\xd6\x84\x71\xe7\x4b\xce\xa4\x20\x15\x90\x3c\xaf\xcb\xda\x16\xa0\x62\x05\x28\x64\xbd\x2a\x1a\x59\x8c\x04\x9f\x8c\xb8\x14\xab\x4e\x1e\x5d\x91\x12\x88\x31\x24\xbf\xd5\x63\x68\xa3\x02\x10\x85\x60\x18\x52\xbb\x2a\x97\x65\x29\x05\x5c\x2b\x0a\x15\x51\x66\x0b\xfa\xb0\x92\x20\x79\xee\x32\x5b\x04\x6f\xc4\x56\x0a\x84\x82\xac\x9d\x84\xf0\xc1\x5f\x1e\xac\x5c\xef\x48\x8e\x99\x94\x1d\x35\x94\x64\xdb\x6e\xd7\x48\xbf\x61\xa6\x60\x5e\x3d\x15\xaa\xd2\x2e\xa5\xc0\x59\xc9\x8c\x8e\x92\xb8\xda\x47\xd4\x7d\x3e\xe6\x61\x21\x15\xfb\xdd\x96\x31\xbc\x1f\x3e\xcd\x51\x70\x69\x63\xa3\xb3\x3a\xc7\xa5\x99\xc1\x4b\x1f\x1b\x8f\x71\xdc\xdc\x77\xce\x81\xb8\xe5\xe9\xee\x91\x36\xe1\xcc\xe0\xda\x17\xaf\xbe\x6c\xa0\xa6\x27\x01\x3d\x82\x9a\xdf\xf4\xe6\xa6\xba\xeb\xe4\xe8\x2a\xe0\x49\xc7\xc4\x22\xe0\x50\x29\x6b\xd6\xa9\x71\x0c\x25\xb9\x45\x20\x90\x90\xa3\xfb\x70\x23\xb4\xbb\x4d\x31\xd7\x0d\x88\xcd\x06\xd1\x7c\x6d\x5d\x37\xfd\xd1\x33\x64\x62\x75\x39\x9d\x78\x44\xda\x07\xcb\xfe\x72\x3a\x61\xc2\xc8\xcb\xe9\x64\x72\x37\xf9\xc4\x7f\x97\xd3\x89\x14\x97\xd3\x89\x29\xf0\x72\x3a\xb9\x9c\x5e\xf7\xb1\xec\x47\xda\x3a\xd2\x52\xa1\xb6\xbb\x35\x58\xb9\x9c\x4e\xd6\x8c\x5c\x4e\x27\x4e\xf2\xcb\xeb\x37\x97\xd3\x77\x97\xd3\x77\x5e\xa8\x68\x25\x51\x71\x16\x95\x35\x65\x26\xca\xb8\x5c\x5d\x4e\xdf\x05\x60\x88\x5a\xa1\x49\x83\xff\x21\x99\xac\xcd\x2c\xe3\x44\xdc\x06\x0b\x77\x3e\x5b\x98\x38\xd8\x9c\x2f\x5f\xa1\x22\xda\x62\xc8\x1e\xd1\xc1\xaa\x69\x95\x68\x18\xea\x5a\x29\x59\x0b\x9b\x46\xc1\x2a\xc9\xb9\xb4\x18\x58\x58\x5a\x4d\x8e\xa2\x24\x53\xf1\xe2\xad\xac\xb6\xa1\x63\xe2\x96\x9f\xe8\x5d\xd7\x55\x25\x95\x89\xfa\xfa\x27\xf6\x9a\xc4\x51\xc7\x37\x93\x57\x37\xaf\x1f\x15\x5f\xdb\x22\xdc\x9d\xa1\x93\x90\x64\x72\x8d\xe0\x4b\xfe\x4c\xde\x01\x11\x14\x96\x4c\x21\x90\x0d\xd9\x7e\x95\xc4\xd4\x5d\xd0\x9e\x0e\xf3\x65\xe3\x8e\xff\xaf\x70\xde\xc6\x88\x31\x54\x75\xc6\x99\x2e\x80\x80\xc0\x0d\x24\xda\x28\x29\x56\x0b\x37\x9a\xdb\x1b\xab\x7b\x85\x4a\x6a\xf3\x98\xf9\xb1\xcc\x90\xd2\x33\x00\xf8\x52\xf6\xdf\x6c\x36\x51\xab\x49\x67\xfc\x02\x79\x15\xdb\x78\x59\x0b\x66\xb6\xb1\xf7\x3b\x29\xe2\xaf\x19\x4d\xa7\x37\xd3\xd7\xaf\xa7\x2f\xff\xed\xe6\xd5\xab\xe9\xcd\xcb\x57\x0f\x21\xc3\x1e\xea\x89\xc0\xf0\x75\xf7\x77\xd2\x5e\x6a\xbb\xa2\xdb\xe3\xa5\x2d\xf6\x6c\x4a\xa7\xf6\xa2\xa2\x82\x7f\x1a\x43\xb5\xb0\x95\x4b\x48\xf8\xd9\xa2\xe3\x33\x50\xe4\x60\xf4\x88\x64\x4f\x84\x56\x0b\x1f\x8b\x14\x59\x1b\x7b\xc2\xf6\xae\xcf\xa4\xe8\xe0\x34\x06\xcd\xca\x8a\x6f\x21\xdf\x5b\xfd\x3c\xae\x1e\x34\xca\x1f\xc2\xea\xd0\x6c\x1e\x64\xae\x5c\x28\x25\x45\x5b\x26\xe8\x5a\xe7\x58\xb9\x26\xb0\x4d\xbd\x7f\xd9\xfe\x4e\x84\x61\x02\xdb\x14\x1d\xc1\xf7\x82\x6f\xa1\xd6\x08\x4b\xa9\x80\x62\x56\xaf\x56\xae\xae\x50\x50\x29\xb6\x26\x06\xdb\xbc\xac\x1b\x54\x74\xa0\x38\xbc\xbb\x51\xde\x2b\x59\xfe\x2e\x6b\xc8\x89\x00\xa3\x48\x7e\xeb\x3d\xa5\x56\xca\x7a\x4a\x85\xfe\x34\x5d\x65\x90\x21\x97\x1b\x47\xe2\xcf\xbd\x64\xc8\x5d\x99\xa0\x11\xa1\x90\x1b\x28\xeb\xdc\x39\xa4\x2d\x03\xdc\x21\x36\x84\x19\xa8\x85\x61\xdc\xeb\xd3\xd4\x4a\xd8\xa2\x02\x0f\xd3\x7a\x53\x38\xed\x4b\xa6\x42\xba\xe8\x9d\x6d\x4f\x1d\x6f\x9f\x22\xe2\x87\xfc\xe8\x6f\x96\x04\xbe\xad\x2b\x43\xfc\xfd\xb5\xdb\xe9\xe4\x5a\x9a\x60\xb9\xf8\x50\xe0\x99\x6a\xad\xbb\x50\x82\xc2\xb7\x9e\x1c\x2a\x25\x0d\xe6\x16\x3a\x40\x56\x84\x09\x6d\x6d\xef\x4a\x14\x2c\x3f\xe1\xc2\xd9\x3d\x35\x0f\xfb\x56\xa9\x9b\x8e\x63\xf8\x96\xcb\x8c\x70\x58\x5b\x9f\xca\xb8\xad\x34\x25\x14\xd2\x2a\xb9\x67\x17\x6d\x88\xa9\x35\xc8\xa5\x1b\xf5\x92\xdb\xf5\x6b\xa2\x2c\x56\xb0\xac\x0c\xa4\x4d\xa3\xcf\x8e\x69\x54\xeb\xa6\x7d\x69\x5f\x0d\x43\x75\x30\xdf\xd9\x37\x85\x5f\x7e\x9d\x3f\x6b\x44\xf9\x2b\x2e\x1d\xf8\xac\x27\xf9\x23\x9b\x82\x18\xc8\x15\x12\x83\x1a\x72\x2e\x75\xad\xbc\x84\x54\xc9\x0a\xac\x94\x2d\xa7\x96\xb3\x9d\xa8\xdc\x6e\x2d\x93\x61\x41\x74\x31\x6a\xfa\x94\x0a\x1d\x1e\xba\xb9\x76\xfc\xc2\xe2\x7b\x68\x19\xb0\x74\x32\x07\x96\xb4\x7c\x23\x8e\x62\x65\x8a\x39\xb0\x17\x2f\x3a\xe2\x0b\xb6\x84\x61\x4b\xf1\x0b\xfb\x35\x32\x77\x91\xdd\x05\xd2\x14\xfa\xbb\xb9\x0d\x1b\x3e\xba\xe2\x2c\xc7\x21\x1b\xc3\xd5\x68\xde\xce\x66\x0a\xc9\x6d\xfb\xd6\xd8\xd1\xff\xe7\xfe\xee\xe6\x87\x9a\x71\xca\x3f\xd0\x8d\x6f\x4b\x68\x20\xb0\x62\xda\x40\xad\x38\x34\xd1\xc2\x9b\xa0\x33\x88\xa3\xeb\x6b\xe5\x04\x97\xcd\x43\x83\xa9\xf6\x08\x9e\x4d\xa4\x51\xd0\xe1\x7f\xfc\xf4\xfd\x77\x91\x36\x8a\x89\x15\x5b\x6e\x87\xf7\xb5\xe2\x33\x78\x3e\x0c\xfe\xa5\x56\x3c\x18\xfd\x32\xf9\x35\x5a\x13\x5e\xe3\xd8\xd9\x7b\xe6\xfe\x9e\xec\x32\x86\xe6\x71\x06\x87\x1b\xee\x46\xa3\xf9\xf9\x16\x4e\xaf\xd7\xa4\x50\xa3\x19\x5a\xc2\x0e\xf8\xc7\x3a\x22\x50\xa2\x29\xa4\x0b\x12\x0a\x73\x29\x04\xe6\x06\xea\x4a\x8a\x46\x25\xc0\xa5\xd6\x7b\x20\xb6\x14\xe9\x29\x28\x1a\xfa\xd4\x95\x05\xff\x85\xd9\x4f\x32\xbf\x45\x33\x1c\x0e\x37\x4c\x50\xb9\x89\xb8\xf4\x41\x3d\xb2\x4e\x2a\x73\xc9\x21\x4d\x53\x68\xc2\x46\x30\x82\xaf\x21\xd8\x68\x1b\x40\x02\x98\xd9\x47\xfb\x34\x82\x17\x70\xbc\xdc\x86\x1e\x78\x01\x41\x4c\x2a\x16\x8c\xbc\x3b\xb4\x8a\x97\xa2\x44\xad\xc9\x0a\xfb\x02\xba\x4b\x5b\x07\x32\x7b\x8e\x52\xaf\x20\x05\x67\xa0\x8a\x28\x8d\x9e\x24\xa2\xc4\x90\x16\x6d\x16\xb3\x8e\x2c\x4d\x41\xd4\x9c\xef\x41\xea\x9d\x62\xde\xc2\xef\x80\x3c\xf2\x59\xed\xab\x34\x05\x7b\x6b\xb6\x2a\xa6\xfb\x95\xd6\xf8\xfe\x7e\x3f\x8a\x6c\x06\xda\xaf\x18\xcd\xfb\x68\x3e\xe0\x86\xf4\x8f\xd8\x21\x3d\xe6\x87\xf4\x01\x86\xae\x9d\xf2\x18\x3f\xdf\x7e\xe9\xb1\x73\x03\x0f\x70\x13\x75\x99\xa1\x7a\x8c\x9d\x6f\xa7\x34\xec\x9c\xaa\xdf\x0b\xd3\x5b\x3b\x86\xab\xd7\xa3\x07\xb8\xa3\x52\xf2\x41\xe6\x42\x9a\xed\xf0\x9e\x93\xad\xcd\x2a\x30\x30\xb2\x7a\xeb\xba\x1f\x83\xb1\xcb\xed\x33\xe8\x38\x8c\x5d\x17\x7b\x06\x03\xf7\x66\xe7\x59\x89\x6e\xd5\xab\xc9\x64\x32\x86\xf6\xf3\xcf\x5f\x88\x75\x42\x55\xe3\xee\x01\x79\x74\x9d\xe7\xb6\xc2\x78\x8a\x44\x0d\x8f\x4e\xa6\xe6\xfd\x09\x52\x75\xb9\xe1\x40\x2c\xf8\xd3\x9f\xe0\x64\xf6\x10\xc6\x71\x0c\x7f\x23\xea\xd6\xf5\x2a\x2a\x85\x6b\xd7\xcf\xe8\xe8\x4b\xa6\xb5\xeb\x13\x68\xa0\x52\x60\xb3\xe6\xf3\xc2\xfe\x89\x8c\x0d\x19\x2c\x60\x72\x2c\xa0\x0d\x87\xbd\xb4\x70\x26\x5b\xf4\xf8\x1e\x26\x82\x8b\x5d\x7f\xbf\x83\x95\xac\x44\xf8\x2a\x85\x20\xe8\x2f\x3e\xa1\xb0\x04\x1d\xb3\x0b\x8d\xe6\x83\xb7\xc5\xb0\xc9\x8e\xe7\x72\xd7\x68\x0c\xd7\x93\xc9\x64\x74\x22\xc4\x6e\xaf\xde\x37\x95\x2d\xd0\x80\x88\xad\x0b\x89\x9d\x6e\x5d\x89\x6a\x8b\x2d\x1b\xd2\x38\xe4\x92\x73\x5f\xb3\x34\x4b\xad\x82\x9b\xbe\x4e\x0a\xe1\xd5\xfc\x4c\x16\xed\x69\xb2\x77\xb4\x63\xf3\x9c\xd1\xfd\xb1\x89\x0e\x75\x76\x44\x1c\x5e\x1d\x18\xe5\xc0\x5e\xe7\x0d\x73\xd1\xc9\xcd\xf6\x1a\x3d\x32\xd7\xde\x5e\xc7\x3a\xeb\xc9\xef\xf9\xbc\xb8\xfa\xc4\x63\x74\xd3\x55\xad\x8b\xe1\x91\xa0\xa3\xf9\xa9\x6d\xde\x1b\x54\xb6\x1e\x97\x36\x65\x59\x5b\xd8\x4b\x87\xc2\x13\x93\xb8\x4b\x81\xc2\x50\xa1\xa0\xa8\xda\x92\xc2\xdf\x21\x6c\x01\x78\x60\x32\x7f\x7f\xed\xc3\xe9\x33\x1d\xc6\x95\x64\x52\x20\x00\xc0\x91\x13\x38\xa0\x1e\x20\xd5\x12\x23\x27\x95\x46\x0a\x29\xf8\xaf\xf1\xc3\x51\x54\x0b\x76\x37\x1c\x85\xcd\xfb\x31\x8f\x76\x7e\xde\x5d\x48\x5b\xb1\x5f\xa4\x10\x24\x46\x01\xa3\xe9\x20\x80\x17\xe7\x5c\xd0\x66\xdd\xc1\x62\x2f\x41\x7f\x29\x40\x62\xe8\xc2\xb5\x68\xfd\xcd\xf0\x1f\x41\x46\xf2\xdb\x95\xbb\x72\xcd\x6c\xa9\x35\x3c\x61\x4b\xd6\xc4\x10\xe5\xb8\x8e\xe6\xb0\x27\x6f\xae\xa4\xb9\x35\xce\x1c\xfc\xdd\xd7\x75\x82\xa1\xfb\x7a\xe2\xde\x32\xa9\x28\xaa\x50\x11\xca\x6a\x3d\x83\x97\xd5\xdd\xfc\x1f\xed\xd7\x25\xd7\xaf\x7e\x54\xd4\x4a\xe1\xe2\x44\xa2\xa6\x01\xfa\x02\x82\x24\xb6\x04\x7f\xc4\xa6\x3b\x6c\xff\x57\x00\x70\xa6\x2b\x0f\xdd\x37\xfa\x66\xbc\x64\x94\x72\xb4\x02\xef\xd9\x5b\x67\xb4\xf6\xef\xbb\xd4\xe1\x96\xd0\xb4\xe3\xf7\x6b\x76\x80\x5c\xe3\x23\x0b\xba\xce\xfe\xc0\x02\x20\xb4\x47\x66\x4e\xe7\xcd\xb5\xde\x0d\xab\x81\xd3\x45\xf3\x9b\x0e\x5a\x2b\x57\x6b\x0d\xc3\x06\x60\x63\x18\x68\x5b\xfb\x51\x3d\x18\x45\x45\x5d\x12\xc1\x7e\xc7\xa1\xcd\x4b\x23\xaf\x2b\xf7\xa9\x20\x38\x0d\xc9\x27\xc2\xec\x7b\xf8\x83\x36\xc7\x0d\x1a\x25\x0e\x5a\xeb\xbe\xdc\x77\x11\x66\x30\x99\x0f\x3e\x53\x43\xe7\x77\x09\x33\xa2\xa0\xff\x12\xb6\xc9\x17\x94\xb4\xbb\xb7\x73\x19\x51\x03\xdf\x33\x71\xf5\xb9\x90\x9b\x74\x70\x3d\xe9\x84\xf4\x86\x76\x76\x1e\x34\x58\x3b\x31\x86\x95\xb2\x75\xcd\x05\x5c\x4f\xbe\x84\xb4\xbe\xef\x72\x74\x02\xa3\x58\x85\x14\x48\x6e\xd8\x1a\xff\x0f\x0e\xf2\x05\x94\xfc\xd9\x22\x5a\x1c\xb6\xca\x73\x30\x3d\x90\xd7\xce\x76\xba\xfd\x57\xeb\x6f\x10\x3b\x0d\xbf\x80\xe0\xec\x41\x1e\x44\xe2\x11\xe1\x91\x6b\x3f\xec\xf7\xee\xdb\x57\x70\x9c\x53\x6c\xb5\xdb\x7d\xb7\x1d\x45\x85\x29\xf9\x30\x48\x8c\xfb\xb5\x8e\x95\xb9\xe3\xe0\x18\xf8\xe1\xc3\x92\x6e\x77\x78\x91\xb1\xf7\x77\x3c\xba\x67\x41\xaf\x38\xe9\xee\x62\x6d\x25\x02\xbb\xfd\x8f\x9a\xe2\x18\x7e\x32\x44\x19\x20\xf0\xf3\x7b\xa8\x2b\x4a\x8c\xff\xca\x64\xf3\xa3\xff\x8a\xd3\xfe\xea\x29\x23\x4a\xc3\x52\xaa\x0d\x51\xb4\xe9\x04\x99\x02\xb7\xee\x2b\x53\x5b\xfa\x69\x34\xef\x6d\x14\x5b\x13\x3e\x3c\xb9\xf7\x3d\x1f\x0e\xa2\xbe\xc9\x07\xa3\x08\x49\x5e\x9c\x12\xba\x8c\xd5\xed\x9b\xc2\x77\xee\x0a\x30\x7c\x3e\x34\x05\xd3\xa3\x88\x18\xa3\x86\x83\x03\x30\x0c\x46\xd6\xae\x57\xbd\x2b\x59\xb7\x3c\x39\x70\xab\xc7\x78\xec\x8b\xe9\xae\x10\x68\xc9\x73\xad\x87\x1e\x57\x83\x71\x8f\xf7\x21\xac\x06\x97\x83\xce\x50\x7b\xf7\xde\x9f\x23\x3d\x2b\xc9\x01\xeb\x81\xf5\xb2\xc1\xc9\xf6\x84\xd2\xb7\xd6\x7f\x86\xc1\x19\x4f\x3f\x46\xc7\xa8\x53\xb6\x8f\xd7\x8f\x6a\xd9\xff\x56\xe4\x01\x15\x33\x3a\x18\x45\xba\xce\x7c\x6f\x62\xf8\xaa\xbb\x80\xb5\x64\x0e\xbc\xc7\xa9\xe0\xa4\xa0\xb0\x5b\x1c\x16\x15\xe1\x51\x11\xf2\x48\xd6\x68\xb6\xf4\xa7\xda\x8d\xad\xc2\x27\xa3\xae\xb5\xf5\x8d\xb6\xc5\x95\xff\xc8\xb0\xc1\x4c\xbb\x4e\x02\x34\x78\x77\xdd\x1c\xdf\xb5\x79\xf3\xc3\xfb\x5e\xe7\xa6\xf3\x88\xa1\xe3\xde\xfd\x20\xf1\x5c\x9f\xe4\xec\x2f\x20\x37\x9b\x4d\xb4\x92\x72\xc5\xfd\x6f\x1f\xbb\x46\x4a\x4c\x2a\x16\x7d\xd4\x01\x10\xbd\x15\x39\x50\x5c\xa2\x5a\xf4\xd8\x37\xdd\x95\x24\xf6\xbf\xcd\x4b\x62\xff\xf3\xe3\xff\x0d\x00\x00\xff\xff\x5c\x86\x6f\x2b\x8f\x2c\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9b, 0xc4, 0x24, 0xeb, 0xf3, 0x1a, 0xba, 0xaf, 0x46, 0xd, 0x6e, 0xa5, 0x55, 0x30, 0x5f, 0x77, 0x3, 0x34, 0x5a, 0xce, 0x40, 0x80, 0x81, 0xcc, 0xe0, 0x68, 0x9a, 0x45, 0xf0, 0x3a, 0xc8, 0xee}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": {faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
